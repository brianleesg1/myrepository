<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/data/jpa 
            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
            
	<jpa:repositories base-package="org.example.springjpa.repository"/>   
	
	<context:component-scan base-package="org.example" />
	
	<!-- configure in Environmen setting : spring.profiles.active -->
	<beans profile="dev">
		 
		 <!-- The EncryptablePropertyPlaceholderConfigurer will read the           -->
		 <!-- .properties files and make their values accessible as ${var}.        -->
		 <!--                                                                      -->
		 <!-- Our "configurationEncryptor" bean (which implements                  --> 
		 <!-- org.jasypt.encryption.StringEncryptor) is set as a constructor arg.  -->
		 <!--                                                                      -->
		 <bean id="propertyConfigurer"
		     class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		   <constructor-arg ref="configurationEncryptor" />
		   <property name="locations">
		     <list>
		       <value>classpath:deploy/deploy-DEV.properties</value>
		     </list>
		   </property>
		 </bean>
	</beans>
	
	<beans>
	
		 <!-- Configuration for encryptor, based on environment variables.         -->
		 <!--                                                                      -->
		 <!-- In this example, the encryption password will be read from an        -->
		 <!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once    --> 
		 <!-- the application has been started, could be safely unset.             -->
		 <!--                                                                      -->
		 <bean id="environmentVariablesConfiguration"
		     class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		   <property name="algorithm" value="PBEWithMD5AndDES" />
		   <property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />
		 </bean>
		  
		  
		 <!--                                                                      -->
		 <!-- The will be the encryptor used for decrypting configuration values.  -->
		 <!--                                                                      -->
		 <bean id="configurationEncryptor"
		     class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		   <property name="config" ref="environmentVariablesConfiguration" />
		 </bean>
		
 
		<bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName">
				<value>${datasource.driver}</value>
			</property>
			<property name="url">
				<value>${datasource.url}</value>
			</property>	
			<property name="username">
			 	<value>${datasource.username}</value>
			</property> 
			<property name="password">
			 	<value>${datasource.password}</value>
			</property>	
		</bean>
		
		<bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
   			<property name="url"><value>${ldap.url}</value></property>
	      	<property name="base"><value>${ldap.base}</value></property>
	      	<property name="userDn"><value>${ldap.userDn}</value></property>
	      	<property name="password"><value>${ldap.password}</value></property>
	   	</bean>
	
	   	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
	      	<constructor-arg ref="contextSource" />
	   	</bean>

		 <!-- This will ensure that hibernate or jpa exceptions are automatically translated into
	         Spring's generic DataAccessException hierarchy for those classes annotated with Repository
	         For example see PersonDaoJpa-->
	    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	    
		<!-- bean post-processor for JPA annotations -->
	    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	    
	    <!-- JPA Entity Manager Factory -->
	    <bean id="entityManagerFactory" 
	          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
	          p:dataSource-ref="dataSource"
	          p:persistenceXmlLocation="classpath:META-INF/persistence.xml" 
	    	  p:persistenceUnitName="springJpaPersistenceUnit" />          
	    
	    
		 <!-- use declarative transaction management  -->
	    <tx:annotation-driven  transaction-manager="transactionManager"/>
	    
	    <!-- Transaction Config -->
	    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" p:entityManagerFactory-ref="entityManagerFactory"/>
            
	</beans>
</beans>